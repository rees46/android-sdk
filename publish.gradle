def pomConfig = {
	licenses {
		license {
			name "The Apache Software License, Version 2.0"
			url "http://www.apache.org/licenses/LICENSE-2.0.txt"
			distribution "repo"
		}
	}
	developers {
		developer {
			id "pnixx"
			name "Sergey Odintsov"
			email "nixx.dj@gmail.com"
		}
	}

	scm {
		url "https://github.com/pnixx"
	}
}

def publicationNames = []
publishing.publications {
	android.libraryVariants.all { variant ->
		if (variant.buildType.name == "debug") return // Prevents publishing debug library

		def flavored = !variant.flavorName.isEmpty()

		/**
		 * Translates "_" in flavor names to "-" for artifactIds, because "-" in flavor name is an
		 * illegal character, but is well used in artifactId names.
		 */
		def variantArtifactId = flavored ? variant.flavorName.replace('_', '-') + "-sdk" : project.name

		/**
		 * If the javadoc destinationDir wasn't changed per flavor, the libraryVariants would
		 * overwrite the javaDoc as all variants would write in the same directory
		 * before the last javadoc jar would have been built, which would cause the last javadoc
		 * jar to include classes from other flavors that it doesn't include.
		 *
		 * Yes, tricky.
		 *
		 * Note that "${buildDir}/docs/javadoc" is the default javadoc destinationDir.
		 */
		def javaDocDestDir = file("${buildDir}/docs/javadoc ${flavored ? variantArtifactId : ""}")

		/**
		 * Includes
		 */
		def sourceDirs = variant.sourceSets.collect {
			it.javaDirectories // Also includes kotlin sources if any.
		}
		def javadoc = task("${variant.name}Javadoc", type: Javadoc) {
			description "Generates Javadoc for ${variant.name}."
			source = variant.javaCompile.source // Yes, javaCompile is deprecated,
			// but I didn't find any working alternative. Please, tweet @Louis_CAD if you find one.
			destinationDir = javaDocDestDir
			classpath += files(android.getBootClasspath().join(File.pathSeparator))
			classpath += files(configurations.compile)
			options.links("http://docs.oracle.com/javase/7/docs/api/");
			options.links("http://d.android.com/reference/");
			exclude '**/BuildConfig.java'
			exclude '**/R.java'
			failOnError false
		}
		def javadocJar = task("${variant.name}JavadocJar", type: Jar, dependsOn: javadoc) {
			description "Puts Javadoc for ${variant.name} in a jar."
			classifier = 'javadoc'
			from javadoc.destinationDir
		}
		def sourcesJar = task("${variant.name}SourcesJar", type: Jar) {
			description "Puts sources for ${variant.name} in a jar."
			from sourceDirs
			classifier = 'sources'
		}

		def publicationName = "splitties${variant.name.capitalize()}Library"
		publicationNames.add(publicationName)

		"$publicationName"(MavenPublication) {
			artifactId variantArtifactId
			group groupId
			version version

			artifact variant.outputs[0].packageLibrary // This is the aar library
			artifact sourcesJar
			artifact javadocJar

			pom {
				packaging 'aar'
				withXml {
					def root = asNode()
					root.appendNode("name", 'Maven')
//					root.appendNode("url", siteUrl)
					root.children().last() + pomConfig
					def depsNode = root["dependencies"][0] ?: root.appendNode("dependencies")

					def addDep = {
						if (it.group == null) return // Avoid empty dependency nodes
						def dependencyNode = depsNode.appendNode('dependency')
						dependencyNode.appendNode('groupId', it.group)
						dependencyNode.appendNode('artifactId', it.name)
						dependencyNode.appendNode('version', it.version)
						if (it.hasProperty('optional') && it.optional) {
							dependencyNode.appendNode('optional', 'true')
						}
					}

					// Add deps that everyone has
					configurations.compile.allDependencies.each addDep
					// Add flavor specific deps
					if (flavored) {
						configurations["${variant.flavorName}Compile"].allDependencies.each addDep
					}
					// NOTE: This library doesn't use builtTypes specific dependencies, so no need to add them.
				}
			}
		}
	}
}

afterEvaluate {
	bintray {
		user = bintray_user
		key = bintray_api_key
		publications = publicationNames

		override = true
		pkg {
			repo = 'maven'
			name = group
			websiteUrl = project.ext.webSite
			vcsUrl = project.ext.vcsUrl
			licenses = ['GPL-2.0']
			labels = ['android', 'personalization']
			githubRepo = 'rees46/rees46-android-sdk'
			githubReleaseNotesFile = 'README.md'
			publish = true
		}
	}
}