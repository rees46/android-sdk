plugins {
	id 'com.android.library'
	id 'org.jetbrains.kotlin.android'
	id 'maven-publish'
	id 'signing'
	id 'kotlin-kapt'
}

version='2.0.31'

android {
	compileSdkVersion 34
	flavorDimensions += 'default'
	viewBinding {
		enabled = true
	}
	defaultConfig {
		minSdkVersion 19
		targetSdkVersion 34
		buildConfigField "String", "VERSION_NAME", "\"" + version + "\""
		multiDexEnabled true
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_20
		targetCompatibility JavaVersion.VERSION_20
	}

	kotlinOptions {
		jvmTarget = '20'
	}

	sourceSets {
		main {
			main.java.srcDirs = ['src/main/kotlin']
		}
	}

	productFlavors {
		rees46 {
			dimension 'default'
			ext.set("group", "com.rees46")
			ext.set("libraryName", "com.rees46.sdk")
			ext.set("webSite", "https://rees46.com")
			ext.set("vcsUrl", "https://github.com/rees46/android-sdk")
		}
		personaclick {
			dimension 'default'
			ext.set("group", "com.personaclick")
			ext.set("libraryName", "com.personaclick.sdk")
			ext.set("webSite", "https://personaclick.com")
			ext.set("vcsUrl", "https://github.com/PersonaClick/android-sdk")
		}
	}

	testFixtures {
		enable = false
	}

	namespace 'com.personalization'
}

configurations {
	rees46Debug
	rees46Release
	personaclickDebug
	personaclickRelease
}

group = 'com.personalization'

apply from: '../publish.gradle'

tasks.register('sourcesJar', Jar) {
	archiveClassifier.set('sources')
	from android.sourceSets.main.java.srcDirs
}

tasks.register('javadoc', Javadoc) {
	source = fileTree(dir: 'src/main/kotlin', include: '**/*.kt')
	classpath += files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
	failOnError false
	options.encoding = 'UTF-8'
	options.charSet('UTF-8')
	options.links("http://docs.oracle.com/javase/7/docs/api/")
	options.links("http://d.android.com/reference/")
	destinationDir = file("${buildDir}/docs/javadoc")
}

tasks.register('javadocJar', Jar) {
	dependsOn javadoc
	archiveClassifier.set('javadoc')
	from javadoc.destinationDir
}

tasks.register('printVersionName') {
	doLast {
		println version
	}
}

tasks.register('increaseVersionCode') {
	doLast {
		def (major, minor, patch) = version.tokenize('.')
		major = major.toInteger()
		minor = minor.toInteger()
		patch = patch.toInteger()

		Integer newPatch = patch + 1

		String result = "$major.$minor.$newPatch"

		String s = buildFile.getText().replaceFirst("version='$version'", "version='$result'")

		buildFile.setText(s)
	}
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

afterEvaluate {
	tasks.javadoc.classpath += files(android.libraryVariants.collect { variant ->
		variant.javaCompileProvider.get().classpath
	})
}
