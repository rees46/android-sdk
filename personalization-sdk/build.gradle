plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
    id 'signing'
    id 'kotlin-kapt'
}

version='2.0.66'

android {
    compileSdkVersion 34
    flavorDimensions += 'default'
    viewBinding {
        enabled = true
    }
    dataBinding {
        enabled = true
    }
    buildFeatures {
        buildConfig = true
    }
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 34
        buildConfigField "String", "VERSION_NAME", "\"" + version + "\""
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_20
        targetCompatibility JavaVersion.VERSION_20
    }

    kotlinOptions {
        jvmTarget = '20'
    }

    sourceSets {
        main {
            main.java.srcDirs = ['src/main/kotlin']
        }
    }

    productFlavors {
        rees46 {
            dimension 'default'
            ext.set("group", "com.rees46")
            ext.set("libraryName", "com.rees46.sdk")
            ext.set("webSite", "https://rees46.com")
            ext.set("vcsUrl", "https://github.com/rees46/android-sdk")
        }
        personaclick {
            dimension 'default'
            ext.set("group", "com.personaclick")
            ext.set("libraryName", "com.personaclick.sdk")
            ext.set("webSite", "https://personaclick.com")
            ext.set("vcsUrl", "https://github.com/PersonaClick/android-sdk")
        }
    }

    testFixtures {
        enable = false
    }

    namespace 'com.personalization'
}

dependencies {
    implementation("com.sun.xml.bind:jaxb-impl:2.3.8")

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'org.jetbrains:annotations:24.1.0'
    implementation 'androidx.core:core-ktx:1.13.1'
    implementation 'androidx.work:work-runtime-ktx:2.9.1'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'

    implementation platform('com.google.firebase:firebase-bom:32.7.0')
    implementation 'com.google.firebase:firebase-messaging:23.4.1'
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    implementation 'androidx.media3:media3-exoplayer:1.4.1'
    implementation 'androidx.media3:media3-ui:1.4.1'
    implementation 'com.google.dagger:dagger:2.51.1'

    implementation("androidx.test:core:1.6.1")
    implementation("androidx.test:rules:1.6.1")
    implementation("androidx.test.ext:junit:1.2.1")

    implementation("com.google.android.gms:play-services-ads-identifier:17.0.0")

    kapt 'com.google.dagger:dagger-compiler:2.48'
}

configurations {
    rees46Debug
    rees46Release
    personaclickDebug
    personaclickRelease
}

group = 'com.personalization'

apply from: '../publish.gradle'

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

tasks.register('javadoc', Javadoc) {
    source = fileTree(dir: 'src/main/kotlin', include: '**/*.kt')
    classpath += files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
    failOnError false
    options.encoding = 'UTF-8'
    options.charSet('UTF-8')
    options.links("http://docs.oracle.com/javase/7/docs/api/")
    options.links("http://d.android.com/reference/")
    destinationDir = file("${buildDir}/docs/javadoc")
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

tasks.register('printVersionName') {
    doLast {
        println version
    }
}

tasks.register('increaseVersionCode') {
    doLast {
        def (major, minor, patch) = version.tokenize('.')
        major = major.toInteger()
        minor = minor.toInteger()
        patch = patch.toInteger()

        Integer newPatch = patch + 1

        String result = "$major.$minor.$newPatch"

        String s = buildFile.getText().replaceFirst("version='$version'", "version='$result'")

        buildFile.setText(s)
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

afterEvaluate {
    tasks.javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath
    })
}

tasks.register("printVariants") {
    doLast {
        android.libraryVariants.forEach { variant ->
            println("Variant: ${variant.flavorName}Sonatype")
        }
    }
}
